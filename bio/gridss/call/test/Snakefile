WORKING_DIR = "working_dir"
samples = ["A", "B"]

preprocess_endings = (
    ".cigar_metrics",
    ".coverage.blacklist.bed",
    ".idsv_metrics",
    ".insert_size_histogram.pdf",
    ".insert_size_metrics",
    ".mapq_metrics",
    ".sv.bam",
    ".sv.bam.bai",
    ".sv_metrics",
    ".tag_metrics",
    )

assembly_endings = (
    ".cigar_metrics",
    ".coverage.blacklist.bed",
    ".downsampled_0.bed",
    ".excluded_0.bed",
    ".idsv_metrics",
    ".mapq_metrics",
    ".quality_distribution.pdf",
    ".quality_distribution_metrics",
    ".subsetCalled_0.bed",
    ".sv.bam",
    ".sv.bam.bai",
    ".tag_metrics",
    )

rule gridss_call:
    input:
        bams=lambda wildcards: expand("mapped/{sample}.bam", sample=["A", "B"]),
        bais=lambda wildcards: expand("mapped/{sample}.bam.bai", sample=["A", "B"]),
        reference="reference/genome.fasta",
        dictionary="reference/genome.dict",
        indices=multiext("reference/genome.fasta", ".amb", ".ann", ".bwt", ".pac", ".sa", ".gridsscache", ".img"),
        preprocess=lambda wildcards: expand("{working_dir}/{sample}.bam.gridss.working/{sample}.bam{ending}", working_dir=[WORKING_DIR], sample=["A", "B"], ending=preprocess_endings),
        assembly="assembly/{group}.bam",
        assembly_others=expand("{working_dir}/{{group}}.bam.gridss.working/{{group}}.bam{ending}", working_dir=[WORKING_DIR], ending=assembly_endings)
    output:
        vcf="vcf/{group}.vcf",
        idx="vcf/{group}.vcf.idx",
        tmpidx=temp(f"{WORKING_DIR}/{{group}}.vcf.gridss.working/g.vcf.allocated.vcf.idx")
    params:
        workingdir=WORKING_DIR
    log:
        "log/gridss/call/{group}.log"
    threads:
        100
    wrapper:
        "master/bio/gridss/call"